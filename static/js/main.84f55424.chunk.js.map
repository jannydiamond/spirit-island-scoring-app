{"version":3,"sources":["globalStyles.ts","components/Header/HeaderBase.tsx","components/Header/index.tsx","pages/Overview/Content.tsx","pages/Overview/FloatingButton/FloatinButtonBase.tsx","pages/Overview/FloatingButton/index.tsx","pages/Overview/Tile/TileContent.tsx","pages/Overview/Tile/TileTitle.tsx","pages/Overview/TileInfoList/TileInfoListBase.tsx","pages/Overview/TileInfoList/index.tsx","pages/Overview/SpiritBadge/SpiritBadgeText.tsx","pages/Overview/SpiritBadge/SpiritBadgeBase.tsx","pages/Overview/SpiritBadge/index.tsx","pages/Overview/TileSpiritList/TileSpiritListBase.tsx","pages/Overview/TileSpiritList/index.tsx","pages/Overview/Scoring/ScoringValue.tsx","pages/Overview/Scoring/ScoringBase.tsx","pages/Overview/Scoring/index.tsx","pages/Overview/Tile/TileBase.tsx","pages/Overview/Tile/index.tsx","pages/Overview/data.ts","pages/Overview/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","_templateObject","HeaderBase","props","react_default","a","createElement","className","title","Header","styled","Header_templateObject","Content","main","Content_templateObject","FloatingButtonBase","icon","FloatingButton","FloatingButton_templateObject","TileContent","div","TileContent_templateObject","TileTitle","h2","TileTitle_templateObject","TileInfoListBase","playerCount","difficulty","TileInfoList","TileInfoList_templateObject","SpiritBadgeText","span","SpiritBadgeText_templateObject","SpiritBadgeBase","SpiritBadge_SpiritBadgeText","name","id","SpiritBadge","SpiritBadge_templateObject","TileSpiritListBase","players","map","player","key","Overview_SpiritBadge","spirit","TileSpiritList","TileSpiritList_templateObject","ScoringValue","ScoringValue_templateObject","ScoringBase","Scoring_ScoringValue","score","Scoring","Scoring_templateObject","TileBase","react_router_dom","to","Tile_TileContent","Tile_TileTitle","game","date","Overview_TileInfoList","length","Overview_TileSpiritList","Overview_Scoring","scoring","Tile","Tile_templateObject","Games","Overview","Fragment","components_Header","Overview_Content","Overview_Tile","Overview_FloatingButton","App","basename","react_router","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","globalStyles","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ynBAGA,IAiBeA,EAjBKC,YAAHC,oBCQFC,EATI,SAACC,GAAD,OACjBC,EAAAC,EAAAC,cAAA,UAAQC,UAAWJ,EAAMI,WACvBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OACXJ,EAAAC,EAAAC,cAAA,+ZCFJ,IAmBeG,EAnBAC,YAAOR,EAAPQ,CAAHC,4HCDZ,IAKeC,EALCF,IAAOG,KAAVC,KCWEC,EANY,SAACZ,GAAD,OACzBC,EAAAC,EAAAC,cAAA,UAAQC,UAAWJ,EAAMI,WACvBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBJ,EAAMa,iaCNzC,IAqBeC,EArBQP,YAAOK,EAAPL,CAAHQ,4ICDpB,IAMeC,EANKT,IAAOU,IAAVC,8GCAjB,IAKeC,EALGZ,IAAOa,GAAVC,KCmBAC,EAbU,SAACtB,GAAD,OACvBC,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,EAAMI,WACnBH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,MAAM,YAClCJ,EAAAC,EAAAC,cAAA,YAAOH,EAAMuB,cAEftB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcC,MAAM,eACjCJ,EAAAC,EAAAC,cAAA,YAAOH,EAAMwB,2XCbnB,IAwBeC,EAxBMlB,YAAOe,EAAPf,CAAHmB,iHCDlB,IAKeC,EALSpB,IAAOqB,KAAVC,KCaNC,EANS,SAAC9B,GAAD,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMI,WACpBH,EAAAC,EAAAC,cAAC4B,EAAD,CAAiB1B,MAAOL,EAAMgC,MAAOhC,EAAMiC,sOCR/C,IAuBeC,EAvBK3B,YAAOuB,EAAPvB,CAAH4B,IAGK,SAAAnC,GAClB,OAAQA,EAAMiC,IACZ,IAAK,KACH,MAAO,QACT,IAAK,IACH,MAAO,UACT,IAAK,KACH,MAAO,SACT,IAAK,IACH,MAAO,aACT,QACE,MAAO,aCSAG,EAhBY,SAACpC,GAS1B,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,EAAMI,WACNJ,EAAMqC,QATNC,IAAI,SAACC,GAAD,OACjBtC,EAAAC,EAAAC,cAAA,MAAIqC,IAAKD,EAAON,IACdhC,EAAAC,EAAAC,cAACsC,EAAD,CAAaT,KAAMO,EAAOG,OAAOV,KAAMC,GAAIM,EAAOG,OAAOT,mMCXjE,IAWeU,EAXQpC,YAAO6B,EAAP7B,CAAHqC,sHCDpB,IAKeC,EALMtC,IAAOqB,KAAVkB,KCYHC,EANK,SAAC/C,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMI,WACpBH,EAAAC,EAAAC,cAAC6C,EAAD,KAAehD,EAAMiD,2OCPzB,IAUeC,EAVC3C,YAAOwC,EAAPxC,CAAH4C,KCwBEC,EAXE,SAACpD,GAAD,OACfC,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAMC,GAAItD,EAAMsD,GAAIlD,UAAWJ,EAAMI,WACnCH,EAAAC,EAAAC,cAACoD,EAAD,KACEtD,EAAAC,EAAAC,cAACqD,EAAD,KAAYxD,EAAMyD,KAAKC,MACvBzD,EAAAC,EAAAC,cAACwD,EAAD,CAAcpC,YAAavB,EAAMyD,KAAKpB,QAAQuB,OAAQpC,WAAYxB,EAAMyD,KAAKjC,aAC7EvB,EAAAC,EAAAC,cAAC0D,EAAD,CAAgBxB,QAASrC,EAAMyD,KAAKpB,WAEtCpC,EAAAC,EAAAC,cAAC2D,EAAD,CAASb,MAAOjD,EAAMyD,KAAKM,gTCpB/B,IAYeC,EAZFzD,YAAO6C,EAAP7C,CAAH0D,KCDGC,EAAgB,CAAC,CAC5BjC,GAAI,EACJyB,KAAM,aACNrB,QAAS,CAAC,CACRJ,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,KACJD,KAAM,kBAEP,CACDC,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,IACJD,KAAM,cAEP,CACDC,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,KACJD,KAAM,oBAIVR,WAAY,EACZuC,QAAS,IACR,CACD9B,GAAI,EACJyB,KAAM,aACNrB,QAAS,CAAC,CACRJ,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,IACJD,KAAM,UAEP,CACDC,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,IACJD,KAAM,eAGVR,WAAY,EACZuC,QAAS,IAEX,CACE9B,GAAI,EACJyB,KAAM,aACNrB,QAAS,CAAC,CACRJ,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,KACJD,KAAM,kBAEP,CACDC,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,IACJD,KAAM,YAEP,CACDC,GAAI,EACJD,KAAM,WACNU,OAAQ,CACNT,GAAI,KACJD,KAAM,oBAIVR,WAAY,EACZuC,QAAS,KCjDII,EAlBE,WAOf,OACElE,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,SAAP,KACEnE,EAAAC,EAAAC,cAACkE,EAAD,CAAQhE,MAAM,aACdJ,EAAAC,EAAAC,cAACmE,EAAD,KARKJ,EAAM5B,IAAI,SAACmB,GAAD,OACfxD,EAAAC,EAAAC,cAACoE,EAAD,CAAMjB,GAAG,IAAId,IAAKiB,EAAKxB,GAAIwB,KAAMA,OAUjCxD,EAAAC,EAAAC,cAACqE,EAAD,CAAgB3D,KAAK,UCHZ4D,EAXH,WACV,OACExE,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYqB,SAAS,KACnBzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM7E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAUrB,GAAG,iBACjDrD,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYE,UAAWZ,OCH7Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OACP7E,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,SAAP,KACEnE,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAACoF,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.84f55424.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport 'rpg-awesome/css/rpg-awesome.min.css';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle;","import React from 'react';\r\n\r\nconst HeaderBase = (props: any) => (\r\n  <header className={props.className}>\r\n    <h1>{props.title}</h1>\r\n    <div>\r\n      Menu\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default HeaderBase;","import styled from 'styled-components';\r\nimport HeaderBase from './HeaderBase';\r\n\r\nconst Header = styled(HeaderBase)`\r\n  background-color: #0a3d62;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  position: fixed;\r\n  top: 0;\r\n  width: calc(100% - 32px);\r\n  box-shadow: 0 0 4px 2px rgba(0, 0, 0, 0.2);\r\n\r\n  h1 {\r\n    font-size: 1.5rem;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nconst Content = styled.main`\r\n  margin-top: 48px;\r\n  padding: 20px 8px 56px;\r\n`;\r\n\r\nexport default Content;","import React from 'react';\r\n\r\ntype Props = {\r\n  icon: string,\r\n  className?: string\r\n}\r\n\r\nconst FloatingButtonBase = (props: Props) => (\r\n  <button className={props.className}>\r\n    <i className=\"material-icons\">{props.icon}</i>\r\n  </button>\r\n);\r\n\r\nexport default FloatingButtonBase;","import styled from 'styled-components';\r\nimport FloatingButtonBase from './FloatinButtonBase';\r\n\r\nconst FloatingButton = styled(FloatingButtonBase)`\r\n  display: block;\r\n  width: 48px;\r\n  height: 48px;\r\n  position: fixed;\r\n  right: 16px;\r\n  bottom: 16px;\r\n  box-shadow: 1px 1px 8px 0px rgba(0,0,0,0.4);\r\n  border-radius: 100%;\r\n  background-color: #0a3d62;\r\n  border: none;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 10;\r\n\r\n  i {\r\n    vertical-align: middle;\r\n  }\r\n`\r\n\r\nexport default FloatingButton;","import styled from 'styled-components';\r\n\r\nconst TileContent = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport default TileContent;","import styled from 'styled-components';\r\n\r\nconst TileTitle = styled.h2`\r\n  font-size: 16px;\r\n  margin: 0;\r\n`\r\n\r\nexport default TileTitle;","import React from 'react';\r\n\r\ntype Props = {\r\n  playerCount: number,\r\n  difficulty: number,\r\n  className?: string\r\n}\r\n\r\nconst TileInfoListBase = (props: Props) => (\r\n  <ul className={props.className}>\r\n    <li>\r\n      <i className=\"ra ra-player\" title=\"Players\"></i>\r\n      <span>{props.playerCount}</span>\r\n    </li>\r\n    <li>\r\n      <i className=\"ra ra-cubes\" title=\"Difficulty\"></i>\r\n      <span>{props.difficulty}</span>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nexport default TileInfoListBase;","import styled from 'styled-components';\r\nimport TileInfoListBase from './TileInfoListBase';\r\n\r\nconst TileInfoList = styled(TileInfoListBase)`\r\n  margin: 8px -8px;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 8px;\r\n\r\n    i {\r\n      font-size: 20px;\r\n      vertical-align: text-bottom;\r\n\r\n      &.ra-player {\r\n        margin: 0 -6px;\r\n      }\r\n    }\r\n\r\n    span {\r\n      padding-left: 8px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default TileInfoList;","import styled from 'styled-components';\r\n\r\nconst SpiritBadgeText = styled.span`\r\n  color: white;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport default SpiritBadgeText;","import React from 'react';\r\nimport SpiritBadgeText from './SpiritBadgeText';\r\n\r\ntype Props = {\r\n  id: string,\r\n  name: string,\r\n  className?: string\r\n}\r\n\r\nconst SpiritBadgeBase = (props: Props) => (\r\n  <div className={props.className}>\r\n    <SpiritBadgeText title={props.name}>{props.id}</SpiritBadgeText>\r\n  </div>\r\n);\r\n\r\nexport default SpiritBadgeBase;","import styled from 'styled-components';\r\nimport SpiritBadgeBase from './SpiritBadgeBase';\r\n\r\nconst SpiritBadge = styled(SpiritBadgeBase)`\r\n  width: 32px;\r\n  height: 32px;\r\n  background-color: ${props => {\r\n    switch (props.id) {\r\n      case 'RG':\r\n        return 'green'\r\n      case 'L':\r\n        return 'darkred'\r\n      case 'TS':\r\n        return 'purple'\r\n      case 'R':\r\n        return 'dodgerblue'\r\n      default:\r\n        return '#dadada'\r\n    }\r\n  }};\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport default SpiritBadge;","import React from 'react';\r\nimport SpiritBadge from '../SpiritBadge/index';\r\n\r\nimport { Player } from '../types';\r\n\r\ntype Props = {\r\n  players: Player[],\r\n  className?: string\r\n}\r\n\r\nconst TileSpiritListBase = (props: Props) => {\r\n  const renderItems = (players: Player[]) => {\r\n    return players.map((player: Player) => (\r\n      <li key={player.id}>\r\n        <SpiritBadge name={player.spirit.name} id={player.spirit.id} />\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <ul className={props.className}>\r\n      {renderItems(props.players)}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TileSpiritListBase;","import styled from 'styled-components';\r\nimport TileSpiritListBase from './TileSpiritListBase';\r\n\r\nconst TileSpiritList = styled(TileSpiritListBase)`\r\n  margin: 16px -4px 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 4px;\r\n  }\r\n`\r\n\r\nexport default TileSpiritList;","import styled from 'styled-components';\r\n\r\nconst ScoringValue = styled.span`\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n`\r\n\r\nexport default ScoringValue;","import React from 'react';\r\nimport ScoringValue from './ScoringValue';\r\n\r\ntype Props = {\r\n  score: number,\r\n  className?: string\r\n}\r\n\r\nconst ScoringBase = (props: Props) => (\r\n  <div className={props.className}>\r\n    <ScoringValue>{props.score}</ScoringValue>\r\n  </div>\r\n);\r\n\r\nexport default ScoringBase;","import styled from 'styled-components';\r\nimport ScoringBase from './ScoringBase';\r\n\r\nconst Scoring = styled(ScoringBase)`\r\n  height: 48px;\r\n  width: 48px;\r\n  border: 4px solid green;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport default Scoring;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TileContent from './TileContent';\r\nimport TileTitle from './TileTitle';\r\nimport TileInfoList from '../TileInfoList';\r\nimport TileSpiritList from '../TileSpiritList';\r\nimport Scoring from '../Scoring';\r\n\r\nimport { Game } from '../types';\r\n\r\ntype Props = {\r\n  to: string,\r\n  game: Game,\r\n  className?: string\r\n}\r\n\r\nconst TileBase = (props: Props) => (\r\n  <Link to={props.to} className={props.className}>\r\n    <TileContent>\r\n      <TileTitle>{props.game.date}</TileTitle>\r\n      <TileInfoList playerCount={props.game.players.length} difficulty={props.game.difficulty} />\r\n      <TileSpiritList players={props.game.players} />\r\n    </TileContent>\r\n    <Scoring score={props.game.scoring} />\r\n  </Link>\r\n);\r\n\r\nexport default TileBase;","import styled from 'styled-components';\r\nimport TileBase from './TileBase';\r\n\r\nconst Tile = styled(TileBase)`\r\n  border-radius: 4px;\r\n  box-shadow: 2px 2px 6px 2px rgba(0,0,0,0.1);\r\n  margin: 0 8px 16px;\r\n  padding: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n\r\nexport default Tile;","import { Game } from \"./types\";\r\n\r\nexport const Games: Game[] = [{\r\n  id: 1,\r\n  date: '20.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'RG',\r\n      name: 'Rampend Green'\r\n    }\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'L',\r\n      name: 'Lightning'\r\n    }\r\n  }, {\r\n    id: 3,\r\n    name: 'Player 3',\r\n    spirit: {\r\n      id: 'TS',\r\n      name: 'Thunderspeaker'\r\n    }\r\n  }\r\n  ],\r\n  difficulty: 4,\r\n  scoring: 52\r\n}, {\r\n  id: 2,\r\n  date: '21.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'R',\r\n      name: 'River'\r\n    }\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'L',\r\n      name: 'Lightning'\r\n    }\r\n  }],\r\n  difficulty: 6,\r\n  scoring: 37\r\n},\r\n{\r\n  id: 3,\r\n  date: '29.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'RG',\r\n      name: 'Rampend Green'\r\n    }\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'S',\r\n      name: 'Serpent'\r\n    }\r\n  }, {\r\n    id: 3,\r\n    name: 'Player 3',\r\n    spirit: {\r\n      id: 'TS',\r\n      name: 'Thunderspeaker'\r\n    }\r\n  }\r\n  ],\r\n  difficulty: 3,\r\n  scoring: 43\r\n}]","import React from 'react';\r\nimport Header from '../../components/Header';\r\n\r\nimport Content from './Content';\r\nimport FloatingButton from './FloatingButton';\r\n\r\nimport Tile from './Tile';\r\n\r\nimport { Games } from './data';\r\nimport { Game } from './types';\r\n\r\nconst Overview = () => {\r\n  const renderTiles = () => {\r\n    return Games.map((game: Game) => (\r\n      <Tile to=\"#\" key={game.id} game={game}/>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header title=\"Overview\" />\r\n      <Content>\r\n        {renderTiles()}\r\n      </Content>\r\n      <FloatingButton icon=\"add\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Overview;","import React from 'react';\r\nimport {\r\n  HashRouter,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport Overview from '../../pages/Overview';\r\n\r\nconst App = () => {\r\n  return (\r\n    <HashRouter basename='/'>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/overview' />} />\r\n        <Route exact path='/overview' component={Overview} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GlobalStyle from './globalStyles';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.Fragment>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}