{"version":3,"sources":["globalStyles.ts","components/Header/BackLink.tsx","components/Header/MenuButtonBase.tsx","components/Header/MenuButton.tsx","components/Header/Divider.tsx","components/Header/AppInfo.tsx","components/Header/GithubLink.tsx","components/Header/GithubLogo.tsx","components/Header/MenuBase.tsx","components/Header/Menu.tsx","components/Header/HeaderBase.tsx","components/Header/index.tsx","pages/Overview/Content.tsx","components/FloatingButton/FloatinButtonBase.tsx","components/FloatingButton/index.tsx","pages/Overview/Tile/TileContent.tsx","pages/Overview/Tile/TileTitle.tsx","pages/Overview/TileInfoList/TileInfoListBase.tsx","pages/Overview/TileInfoList/index.tsx","pages/Overview/SpiritBadge/SpiritBadgeText.tsx","pages/Overview/SpiritBadge/SpiritBadgeBase.tsx","pages/Overview/SpiritBadge/index.tsx","pages/Overview/TileSpiritList/TileSpiritListBase.tsx","pages/Overview/TileSpiritList/index.tsx","pages/Overview/Scoring/ScoringValue.tsx","pages/Overview/Scoring/ScoringBase.tsx","pages/Overview/Scoring/index.tsx","pages/Overview/Tile/TileBase.tsx","pages/Overview/Tile/index.tsx","enums/MapType.tsx","enums/Board.tsx","data.ts","pages/Overview/index.tsx","pages/Scoring/Content.tsx","pages/Scoring/Label.tsx","pages/Scoring/index.tsx","pages/Settings/Content.tsx","pages/Settings/Tile.tsx","pages/Settings/Checkbox/Label.tsx","pages/Settings/Checkbox/Input.tsx","pages/Settings/Checkbox/CheckboxBase.tsx","pages/Settings/Checkbox/index.tsx","pages/Settings/ExpansionsList/ExpansionsListBase.tsx","pages/Settings/ExpansionsList/index.tsx","pages/Settings/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","BackLink","styled","Link","MenuButtonBase","props","className","onClick","handleClick","MenuButton","Divider","hr","AppInfo","div","GithubLink","a","GithubLogo","img","MenuBase","onSettingsPage","Fragment","to","href","target","src","alt","process","Menu","HeaderBase","useState","menuOpenState","setMenuOpenState","url","renderBackLink","back","title","Header","Content","main","FloatingButtonBase","icon","FloatingButton","TileContent","TileTitle","h2","TileInfoListBase","playerCount","difficulty","TileInfoList","SpiritBadgeText","span","SpiritBadgeBase","name","id","SpiritBadge","TileSpiritListBase","players","map","player","key","spirit","TileSpiritList","ScoringValue","ScoringBase","score","Scoring","TileBase","game","date","length","scoring","MapType","Board","Tile","Games","board","A","C","B","mapType","normal","adversary","level","blightCard","eventDeck","blightToken","dahan","explorerCards","D","special","scenario","Overview","linkUrl","Label","ScoringView","filter","parseInt","match","params","renderPlayers","label","Input","input","CheckboxBase","checked","checkboxCheckedState","setCheckboxCheckedState","type","onChange","htmlFor","Checkbox","ExpansionsListBase","expansions","expansion","ExpansionsList","Expansions","Settings","App","basename","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d7c758.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport 'rpg-awesome/css/rpg-awesome.min.css';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle;","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst BackLink = styled(Link)`\r\n  color: white;\r\n  height: 48px;\r\n  width: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-decoration: none;\r\n  margin-left: -16px;\r\n`;\r\n\r\nexport default BackLink;","import React from 'react';\r\n\r\nconst MenuButtonBase = (props: any) => {\r\n  return (\r\n    <button className={props.className} onClick={props.handleClick}>\r\n      <span className=\"material-icons\">menu</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default MenuButtonBase;","import styled from 'styled-components';\r\nimport MenuButtonBase from './MenuButtonBase';\r\n\r\nconst MenuButton = styled(MenuButtonBase)`\r\n  appearance: none;\r\n  background-color: transparent;\r\n  border: 0;\r\n  color: #fff;\r\n  outline: 0;\r\n  height: 48px;\r\n  width: 48px;\r\n  cursor: pointer;\r\n  margin-right: -16px;\r\n\r\n  &:hover {\r\n    background-color: #133352;\r\n  }\r\n`;\r\n\r\nexport default MenuButton;","import styled from 'styled-components';\r\n\r\nconst Divider = styled.hr`\r\n  height: 1px;\r\n  border: none;\r\n  background-color: #dadada;\r\n`\r\n\r\nexport default Divider;","import styled from 'styled-components';\r\n\r\nconst AppInfo = styled.div`\r\n  padding: 8px 16px 0;\r\n`\r\n\r\nexport default AppInfo;","import styled from 'styled-components';\r\n\r\nconst GithubLink = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  color: inherit;\r\n  text-decoration: none;\r\n  margin-bottom: 18px;\r\n\r\n  &:hover {\r\n    opacity: .6;\r\n  }\r\n`\r\n\r\nexport default GithubLink;","import styled from 'styled-components';\r\n\r\nconst GithubLogo = styled.img`\r\n  height: 24px;\r\n  width: 24px;\r\n  margin-right: 8px;\r\n`\r\n\r\nexport default GithubLogo;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Divider from './Divider';\r\nimport AppInfo from './AppInfo';\r\nimport GithubLink from './GithubLink';\r\nimport GithubLogo from './GithubLogo';\r\n\r\nconst MenuBase = (props: any) => {\r\n  return (\r\n    <div className={props.className}>\r\n      {\r\n        !props.onSettingsPage\r\n          ? (\r\n            <React.Fragment>\r\n              <ul>\r\n                <li><Link to=\"/settings\">Settings</Link></li>\r\n              </ul>\r\n              <Divider />\r\n            </React.Fragment>\r\n          )\r\n          : null\r\n      }\r\n      <AppInfo>\r\n        <GithubLink\r\n          href=\"https://github.com/jannydiamond/spirit-island-scoring-app\"\r\n          target=\"_blank\"\r\n        >\r\n          <GithubLogo src=\"images/github-logo.svg\" alt=\"SVG: Github logo\" />\r\n          Github\r\n        </GithubLink>\r\n        Version: {process.env.REACT_APP_VERSION}\r\n      </AppInfo>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuBase;","import styled from 'styled-components';\r\nimport MenuBase from './MenuBase';\r\n\r\nconst Menu = styled(MenuBase)`\r\n  position: absolute;\r\n  right: 0;\r\n  z-index: 10;\r\n  background: white;\r\n  top: 100%;\r\n  transform: translateX(200%);\r\n  transition: transform .3s ease-in-out;\r\n  padding: 16px 0;\r\n  box-shadow: 0 2px 8px 0 rgba(0,0,0,0.1);\r\n  color: black;\r\n  min-width: 200px;\r\n\r\n  &.is-open {\r\n    transform: translateX(0);\r\n  }\r\n\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n\r\n    li {\r\n      cursor: pointer;\r\n      height: 40px;\r\n      transition: background-color .3s ease-in-out;\r\n\r\n      &:hover {\r\n        background-color: #efefef;\r\n      }\r\n\r\n      a {\r\n        color: inherit;\r\n        text-decoration: none;\r\n        display: block;\r\n        line-height: 40px;\r\n        padding: 0 16px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Menu;","import React, { useState } from 'react';\r\nimport BackLink from './BackLink';\r\nimport MenuButton from './MenuButton';\r\nimport Menu from './Menu';\r\n\r\nconst HeaderBase = (props: any) => {\r\n  const [menuOpenState, setMenuOpenState] = useState(false);\r\n\r\n  const renderBackLink = (url: string) => {\r\n    if(url) return (\r\n      <BackLink to={url}><i className=\"material-icons\">chevron_left</i></BackLink>\r\n    )\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setMenuOpenState(!menuOpenState);\r\n  }\r\n\r\n  return (\r\n    <header className={props.className}>\r\n      {renderBackLink(props.back)}\r\n      <h1>{props.title}</h1>\r\n      <div>\r\n        <MenuButton handleClick={handleClick} />\r\n        { \r\n          props.onSettingsPage \r\n            ? (<Menu className={menuOpenState ? 'is-open' : ''} onSettingsPage /> )\r\n            : (<Menu className={menuOpenState ? 'is-open' : ''} />)\r\n        }      \r\n      </div>\r\n      \r\n    </header>\r\n  )\r\n};\r\n\r\nexport default HeaderBase;","import styled from 'styled-components';\r\nimport HeaderBase from './HeaderBase';\r\n\r\nconst Header = styled(HeaderBase)`\r\n  background-color: #0a3d62;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 50;\r\n  width: calc(100% - 32px);\r\n  box-shadow: 0 0 4px 2px rgba(0, 0, 0, 0.2);\r\n\r\n  h1 {\r\n    font-size: 1.5rem;\r\n    margin: 0;\r\n    flex: 1 1 auto;\r\n  }\r\n`;\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nconst Content = styled.main`\r\n  margin-top: 48px;\r\n  padding: 20px 8px 56px;\r\n`;\r\n\r\nexport default Content;","import React from 'react';\r\n\r\ntype Props = {\r\n  icon: string,\r\n  className?: string\r\n}\r\n\r\nconst FloatingButtonBase = (props: Props) => (\r\n  <button className={props.className}>\r\n    <i className=\"material-icons\">{props.icon}</i>\r\n  </button>\r\n);\r\n\r\nexport default FloatingButtonBase;","import styled from 'styled-components';\r\nimport FloatingButtonBase from './FloatinButtonBase';\r\n\r\nconst FloatingButton = styled(FloatingButtonBase)`\r\n  display: block;\r\n  width: 48px;\r\n  height: 48px;\r\n  position: fixed;\r\n  right: 16px;\r\n  bottom: 16px;\r\n  box-shadow: 1px 1px 8px 0px rgba(0,0,0,0.4);\r\n  border-radius: 100%;\r\n  background-color: #0a3d62;\r\n  border: none;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 10;\r\n\r\n  i {\r\n    vertical-align: middle;\r\n  }\r\n`\r\n\r\nexport default FloatingButton;","import styled from 'styled-components';\r\n\r\nconst TileContent = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport default TileContent;","import styled from 'styled-components';\r\n\r\nconst TileTitle = styled.h2`\r\n  font-size: 16px;\r\n  margin: 0;\r\n`\r\n\r\nexport default TileTitle;","import React from 'react';\r\n\r\ntype Props = {\r\n  playerCount: number,\r\n  difficulty: number,\r\n  className?: string\r\n}\r\n\r\nconst TileInfoListBase = (props: Props) => (\r\n  <ul className={props.className}>\r\n    <li>\r\n      <i className=\"ra ra-player\" title=\"Players\"></i>\r\n      <span>{props.playerCount}</span>\r\n    </li>\r\n    <li>\r\n      <i className=\"ra ra-cubes\" title=\"Difficulty\"></i>\r\n      <span>{props.difficulty}</span>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nexport default TileInfoListBase;","import styled from 'styled-components';\r\nimport TileInfoListBase from './TileInfoListBase';\r\n\r\nconst TileInfoList = styled(TileInfoListBase)`\r\n  margin: 8px -8px;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 8px;\r\n\r\n    i {\r\n      font-size: 20px;\r\n      vertical-align: text-bottom;\r\n\r\n      &.ra-player {\r\n        margin: 0 -6px;\r\n      }\r\n    }\r\n\r\n    span {\r\n      padding-left: 8px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default TileInfoList;","import styled from 'styled-components';\r\n\r\nconst SpiritBadgeText = styled.span`\r\n  color: white;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport default SpiritBadgeText;","import React from 'react';\r\nimport SpiritBadgeText from './SpiritBadgeText';\r\n\r\ntype Props = {\r\n  id: string,\r\n  name: string,\r\n  className?: string\r\n}\r\n\r\nconst SpiritBadgeBase = (props: Props) => (\r\n  <div className={props.className}>\r\n    <SpiritBadgeText title={props.name}>{props.id}</SpiritBadgeText>\r\n  </div>\r\n);\r\n\r\nexport default SpiritBadgeBase;","import styled from 'styled-components';\r\nimport SpiritBadgeBase from './SpiritBadgeBase';\r\n\r\nconst SpiritBadge = styled(SpiritBadgeBase)`\r\n  width: 32px;\r\n  height: 32px;\r\n  background-color: ${props => {\r\n    switch (props.id) {\r\n      case 'RG':\r\n        return 'green'\r\n      case 'L':\r\n        return 'darkred'\r\n      case 'TS':\r\n        return 'purple'\r\n      case 'R':\r\n        return 'dodgerblue'\r\n      default:\r\n        return '#dadada'\r\n    }\r\n  }};\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport default SpiritBadge;","import React from 'react';\r\nimport SpiritBadge from '../SpiritBadge/index';\r\n\r\nimport { Player } from '../../../types';\r\n\r\ntype Props = {\r\n  players: Player[],\r\n  className?: string\r\n}\r\n\r\nconst TileSpiritListBase = (props: Props) => {\r\n  const renderItems = (players: Player[]) => {\r\n    return players.map((player: Player) => (\r\n      <li key={player.id}>\r\n        <SpiritBadge name={player.spirit.name} id={player.spirit.id} />\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <ul className={props.className}>\r\n      {renderItems(props.players)}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TileSpiritListBase;","import styled from 'styled-components';\r\nimport TileSpiritListBase from './TileSpiritListBase';\r\n\r\nconst TileSpiritList = styled(TileSpiritListBase)`\r\n  margin: 16px -4px 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 4px;\r\n  }\r\n`\r\n\r\nexport default TileSpiritList;","import styled from 'styled-components';\r\n\r\nconst ScoringValue = styled.span`\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n`\r\n\r\nexport default ScoringValue;","import React from 'react';\r\nimport ScoringValue from './ScoringValue';\r\n\r\ntype Props = {\r\n  score: number,\r\n  className?: string\r\n}\r\n\r\nconst ScoringBase = (props: Props) => (\r\n  <div className={props.className}>\r\n    <ScoringValue>{props.score}</ScoringValue>\r\n  </div>\r\n);\r\n\r\nexport default ScoringBase;","import styled from 'styled-components';\r\nimport ScoringBase from './ScoringBase';\r\n\r\nconst Scoring = styled(ScoringBase)`\r\n  height: 48px;\r\n  width: 48px;\r\n  border: 4px solid green;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport default Scoring;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TileContent from './TileContent';\r\nimport TileTitle from './TileTitle';\r\nimport TileInfoList from '../TileInfoList';\r\nimport TileSpiritList from '../TileSpiritList';\r\nimport Scoring from '../Scoring';\r\n\r\nimport { Game } from '../../../types';\r\n\r\ntype Props = {\r\n  to: string,\r\n  game: Game,\r\n  className?: string\r\n}\r\n\r\nconst TileBase = (props: Props) => (\r\n  <Link to={props.to} className={props.className}>\r\n    <TileContent>\r\n      <TileTitle>{props.game.date}</TileTitle>\r\n      <TileInfoList playerCount={props.game.players.length} difficulty={props.game.difficulty} />\r\n      <TileSpiritList players={props.game.players} />\r\n    </TileContent>\r\n    <Scoring score={props.game.scoring} />\r\n  </Link>\r\n);\r\n\r\nexport default TileBase;","import styled from 'styled-components';\r\nimport TileBase from './TileBase';\r\n\r\nconst Tile = styled(TileBase)`\r\n  border-radius: 4px;\r\n  box-shadow: 2px 2px 6px 2px rgba(0,0,0,0.1);\r\n  margin: 0 8px 16px;\r\n  padding: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n\r\nexport default Tile;","export enum MapType {\r\n  normal = 'normal',\r\n  special = 'special'\r\n}","export enum Board {\r\n  A = 'A',\r\n  B = 'B',\r\n  C = 'C',\r\n  D = 'D',\r\n}","import { Game } from \"./types\";\r\nimport { MapType } from './enums/MapType';\r\nimport { Board } from './enums/Board';\r\n\r\nexport const Games: Game[] = [{\r\n  id: 1,\r\n  date: '20.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'RG',\r\n      name: 'Rampend Green'\r\n    },\r\n    board: Board.A\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'L',\r\n      name: 'Lightning'\r\n    },\r\n    board: Board.C\r\n  }, {\r\n    id: 3,\r\n    name: 'Player 3',\r\n    spirit: {\r\n      id: 'TS',\r\n      name: 'Thunderspeaker'\r\n    },\r\n    board: Board.B\r\n  }\r\n  ],\r\n  difficulty: 4,\r\n  scoring: 52,\r\n  mapType: MapType.normal,\r\n  adversary: {\r\n    id: 1,\r\n    name: 'Brandenburg-Preußen',\r\n    level: 3\r\n  },\r\n  blightCard: true,\r\n  eventDeck: true,\r\n  blightToken: 11,\r\n  dahan: 13,\r\n  explorerCards: 2\r\n}, {\r\n  id: 2,\r\n  date: '21.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'R',\r\n      name: 'River'\r\n    },\r\n    board: Board.B\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'L',\r\n      name: 'Lightning'\r\n    },\r\n    board: Board.C\r\n  }],\r\n  difficulty: 6,\r\n  scoring: 37,\r\n  mapType: MapType.normal,\r\n  adversary: {\r\n    id: 1,\r\n    name: 'Brandenburg-Preußen',\r\n    level: 3\r\n  },\r\n  blightCard: true,\r\n  eventDeck: true,\r\n  blightToken: 8,\r\n  dahan: 12,\r\n  explorerCards: 4\r\n},\r\n{\r\n  id: 3,\r\n  date: '29.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'RG',\r\n      name: 'Rampend Green'\r\n    },\r\n    board: Board.C\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'S',\r\n      name: 'Serpent'\r\n    },\r\n    board: Board.A\r\n  }, {\r\n    id: 3,\r\n    name: 'Player 3',\r\n    spirit: {\r\n      id: 'TS',\r\n      name: 'Thunderspeaker'\r\n    },\r\n    board: Board.D\r\n  }\r\n  ],\r\n  difficulty: 3,\r\n  scoring: 43,\r\n  mapType: MapType.special,\r\n  adversary: {\r\n    id: 1,\r\n    name: 'Brandenburg-Preußen',\r\n    level: 3\r\n  },\r\n  scenario: {\r\n    id: 1,\r\n    name: 'Scenario Name',\r\n    level: 1\r\n  },\r\n  blightCard: true,\r\n  eventDeck: true,\r\n  blightToken: 14,\r\n  dahan: 15,\r\n  explorerCards: 3\r\n}]","import React from 'react';\r\nimport Header from '../../components/Header';\r\n\r\nimport Content from './Content';\r\nimport FloatingButton from '../../components/FloatingButton';\r\n\r\nimport Tile from './Tile';\r\n\r\nimport { Games } from '../../data';\r\nimport { Game } from '../../types';\r\n\r\nconst Overview = () => {\r\n  const renderTiles = () => {\r\n    return Games.map((game: Game) => {\r\n      const linkUrl = `/scoring/${game.id}`\r\n      return (\r\n        <Tile to={linkUrl} key={game.id} game={game} />\r\n      )\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header title=\"Overview\" />\r\n      <Content>\r\n        {renderTiles()}\r\n      </Content>\r\n      <FloatingButton icon=\"add\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Overview;","import styled from 'styled-components';\r\n\r\nconst Content = styled.main`\r\n  margin-top: 48px;\r\n  padding: 16px 16px 56px;\r\n\r\n  .content-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    padding-bottom: 8px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 16px;\r\n  }\r\n\r\n  section {\r\n    padding: 16px 0 8px;\r\n\r\n    h2 {\r\n      padding-bottom: 8px;\r\n      border-bottom: 1px solid #dadada;\r\n    }\r\n\r\n    table {\r\n      border-collapse: collapse;\r\n      width: 100%;\r\n      margin: 0 -8px;\r\n\r\n      thead {\r\n        tr {\r\n          th {\r\n            font-size: 12px;\r\n            padding: 4px 8px 8px;\r\n            text-align: left;\r\n\r\n            &.spirit {\r\n              width: 32px;\r\n            }\r\n\r\n            &.board {\r\n              text-align: center;\r\n              width: 48px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      tbody {\r\n        tr {\r\n          td {\r\n            padding: 4px 8px;\r\n\r\n            &.spirit {\r\n              width: 32px;\r\n            }\r\n\r\n            &.board {\r\n              text-align: center;\r\n              width: 48px;\r\n            }\r\n          }\r\n\r\n          &:last-child {\r\n            td {\r\n              padding-bottom: 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Content;","import styled from 'styled-components';\r\n\r\nconst Label = styled.span`\r\n    font-size: 12px;\r\n    display: block;\r\n    margin-bottom: 4px;\r\n    font-weight: bold;\r\n`\r\n\r\nexport default Label;","import React from 'react';\r\nimport Header from '../../components/Header';\r\n\r\nimport Content from './Content';\r\nimport FloatingButton from '../../components/FloatingButton';\r\nimport TileInfoList from '../Overview/TileInfoList';\r\nimport Scoring from '../Overview/Scoring';\r\nimport SpiritBadge from '../Overview/SpiritBadge';\r\n\r\nimport { Games } from '../../data';\r\nimport { Game, Player } from '../../types';\r\nimport Label from './Label';\r\n\r\nconst ScoringView = (props: any) => {\r\n  const game = Games.filter((game: Game) => game.id === parseInt(props.match.params.id))[0];\r\n\r\n  const renderPlayers = (game: Game) => {\r\n    return game.players.map(\r\n      (player: Player) => (\r\n        <tr key={player.id}>\r\n          <td className=\"spirit\"><SpiritBadge name={player.spirit.name} id={player.spirit.id} /></td>\r\n          <td className=\"board\">{player.board}</td>\r\n          <td className=\"player\">{player.name}</td>\r\n        </tr>\r\n      )\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header title=\"Scoring\" back=\"/overview\" />\r\n      <Content>\r\n        <div className=\"content-header\">\r\n          <div className=\"content-header__content\">\r\n            <h2>{game.date}</h2>\r\n            <TileInfoList playerCount={game.players.length} difficulty={game.difficulty} />\r\n          </div>\r\n          <Scoring score={game.scoring} />\r\n        </div>\r\n        <section>\r\n          <h2>Players</h2>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"spirit\">Spirit</th>\r\n                <th className=\"board\">Board</th>\r\n                <th className=\"player\">Player</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              { renderPlayers(game) }\r\n            </tbody>\r\n          </table>\r\n        </section>\r\n        <section>\r\n          <h2>Game Setup</h2>\r\n          <p><Label>Map Type:</Label>{game.mapType}</p>\r\n          <p><Label>Adversary:</Label>{game.adversary ? `${game.adversary.name}, Level ${game.adversary.level}` : '-'}</p>\r\n          <p><Label>Scenario:</Label>{game.scenario ? `${game.scenario.name}, Level ${game.scenario.level}` : '-'}</p>\r\n          <p><Label>Blight Card:</Label>{game.blightCard ? 'yes': 'no'}</p>\r\n          <p><Label>Event Deck:</Label>{game.eventDeck ? 'yes' : 'no'}</p>\r\n        </section>\r\n        <section>\r\n          <h2>Game Results</h2>\r\n          <p><Label>Blight Tokens:</Label>{game.blightToken}</p>\r\n          <p><Label>Dahans:</Label>{game.dahan}</p>\r\n          <p><Label>Explorer Cards:</Label>{game.explorerCards}</p>\r\n        </section>\r\n        \r\n      </Content>\r\n      <FloatingButton icon=\"edit\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoringView;","import styled from 'styled-components';\r\n\r\nconst Content = styled.main`\r\n  margin-top: 48px;\r\n  padding: 20px 8px 56px;\r\n`;\r\n\r\nexport default Content;","import styled from \"styled-components\";\r\n\r\nconst Tile = styled.div`\r\n  border-radius: 4px;\r\n  box-shadow: 2px 2px 6px 2px rgba(0,0,0,0.1);\r\n  margin: 0 8px 16px;\r\n  padding: 16px;\r\n  user-select: none;\r\n  text-decoration: none;\r\n  color: inherit;\r\n\r\n  > p {\r\n    margin-top: 0;\r\n  }\r\n\r\n  ul {\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n\r\n    li {\r\n      margin: 8px 0;\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Tile;","import styled from 'styled-components';\r\n\r\nconst Label = styled.label`\r\n  padding-left: 28px;\r\n  line-height: 24px;\r\n  cursor: pointer;\r\n\r\n  &::before,\r\n  &::after {\r\n    font-size: 24px;\r\n    font-family: \"Material Icons\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    color: #0a3d62;\r\n  }\r\n\r\n  &::before {\r\n    content: \"check_box_outline_blank\";\r\n  }\r\n\r\n  &::after {\r\n    content: \"check_box\";\r\n    opacity: 0;\r\n    transition: opacity .2s ease-in-out;\r\n  }\r\n\r\n  .is-checked + & {\r\n    &::after {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`\r\n\r\nexport default Label;","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n    position: absolute;\r\n    left: -9999px;\r\n    top: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin: 2px;\r\n    padding: 0;\r\n    visibility: hidden;\r\n`\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport Label from './Label';\r\nimport Input from './Input';\r\n\r\nconst CheckboxBase = (props: any) => {\r\n  const [checkboxCheckedState, setCheckboxCheckedState] = useState(props.checked);\r\n\r\n  const handleChange = () => {\r\n    setCheckboxCheckedState(!checkboxCheckedState);\r\n  }\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <Input id={props.id} type=\"checkbox\" onChange={handleChange} className={checkboxCheckedState ? 'is-checked' : ''} />\r\n      <Label htmlFor={props.id}>{props.label}</Label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxBase;","import styled from 'styled-components';\r\nimport CheckboxBase from './CheckboxBase';\r\n\r\nconst Checkbox = styled(CheckboxBase)`\r\n  position: relative;\r\n  padding-top: 1px;\r\n`\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport Checkbox from '../Checkbox';\r\n\r\nconst ExpansionsListBase = (props: any) => {\r\n  const renderExpansions = (expansions: any) => {\r\n    return expansions.map( (expansion: any) => (\r\n      <li key={expansion.id}>\r\n        <Checkbox id={expansion.id} label={expansion.name} />\r\n      </li>\r\n      \r\n    ))\r\n  }\r\n  return(\r\n    <ul className={props.className}>\r\n      {renderExpansions(props.expansions)}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ExpansionsListBase;","import styled from 'styled-components';\r\nimport ExpansionsListBase from './ExpansionsListBase';\r\n\r\nconst ExpansionsList = styled(ExpansionsListBase)`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    margin: 8px 0;\r\n\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport default ExpansionsList;","import React from 'react';\r\nimport Header from '../../components/Header';\r\nimport Content from './Content';\r\n\r\nimport Tile from './Tile';\r\nimport ExpansionsList from './ExpansionsList/index';\r\n\r\nconst Expansions = [\r\n  {\r\n    id: \"core\",\r\n    name: \"Spirit Island Core Game\",\r\n    checked: false\r\n  },\r\n  {\r\n    id: \"bac\",\r\n    name: \"Branch and Claws\",\r\n    checked: false\r\n  },\r\n  {\r\n    id: \"promo1\",\r\n    name: \"Promo Spirits 1\",\r\n    checked: false\r\n  }\r\n];\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <div>\r\n      <Header title=\"Settings\" back=\"/overview\" onSettingsPage />\r\n      <Content>\r\n        <Tile>\r\n          <p>Choose the expansions you have:</p>\r\n          <ExpansionsList expansions={Expansions} />\r\n        </Tile>\r\n      </Content>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport {\r\n  HashRouter,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport Overview from '../../pages/Overview';\r\nimport ScoringView from '../../pages/Scoring';\r\nimport Settings from '../../pages/Settings';\r\n\r\nconst App = () => {\r\n  return (\r\n    <HashRouter basename='/'>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/overview' />} />\r\n        <Route exact path='/overview' component={Overview} />\r\n        <Route exact path='/scoring/:id' component={ScoringView} />\r\n        <Route exact path='/settings' component={Settings} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GlobalStyle from './globalStyles';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.Fragment>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}