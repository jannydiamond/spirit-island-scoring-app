{"version":3,"sources":["globalStyles.ts","components/Header/Header.tsx","pages/Overview/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","_templateObject","Header","styled","header","Header_templateObject","Content","main","Overview_templateObject","Tile","Link","_templateObject2","TileContent","div","_templateObject3","TileTitle","h2","_templateObject4","TileInfoList","ul","_templateObject5","TileSpiritList","_templateObject6","Scoring","_templateObject7","ScoringValue","span","_templateObject8","ButtonFloating","button","_templateObject9","Games","id","date","players","name","spirit","difficulty","scoring","Overview","react_default","a","createElement","Fragment","Header_Header","map","game","to","key","className","title","length","player","App","react_router_dom","react_router","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","globalStyles","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb4581e7.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport 'rpg-awesome/css/rpg-awesome.min.css';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle;","import styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  background-color: #0a3d62;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  position: fixed;\r\n  top: 0;\r\n  width: calc(100% - 32px);\r\n  box-shadow: 0 0 4px 2px rgba(0, 0, 0, 0.2);\r\n\r\n  h1 {\r\n    font-size: 1.5rem;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from '../../components/Header/Header';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst Content = styled.main`\r\n  margin-top: 48px;\r\n  padding: 20px 8px 56px;\r\n`;\r\n\r\nconst Tile = styled(Link)`\r\n  border-radius: 4px;\r\n  box-shadow: 2px 2px 6px 2px rgba(0,0,0,0.1);\r\n  margin: 0 8px 16px;\r\n  padding: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n\r\nconst TileContent = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst TileTitle = styled.h2`\r\n  font-size: 16px;\r\n  margin: 0;\r\n`\r\n\r\nconst TileInfoList = styled.ul`\r\n  margin: 8px -8px;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 8px;\r\n\r\n    i {\r\n      font-size: 20px;\r\n      vertical-align: text-bottom;\r\n\r\n      &.ra-player {\r\n        margin: 0 -6px;\r\n      }\r\n    }\r\n\r\n    span {\r\n      padding-left: 8px;\r\n    }\r\n  }\r\n`\r\n\r\nconst TileSpiritList = styled.ul`\r\n  margin: 16px -4px 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  li {\r\n    float: left;\r\n    padding: 0 4px;\r\n\r\n    div {\r\n      width: 32px;\r\n      height: 32px;\r\n      background-color: green;\r\n      border-radius: 100%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    span {\r\n      color: white;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Scoring = styled.div`\r\n  height: 48px;\r\n  width: 48px;\r\n  border: 4px solid green;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst ScoringValue = styled.span`\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n`\r\n\r\nconst ButtonFloating = styled.button`\r\n  width: 48px;\r\n  height: 48px;\r\n  position: fixed;\r\n  right: 16px;\r\n  bottom: 16px;\r\n  box-shadow: 1px 1px 8px 0px rgba(0,0,0,0.4);\r\n  border-radius: 100%;\r\n  background-color: #0a3d62;\r\n  border: none;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 10;\r\n\r\n  i {\r\n    vertical-align: middle;\r\n  }\r\n`\r\n\r\nconst Games = [{\r\n  id: 1,\r\n  date: '20.04.2019',\r\n  players: [{\r\n      id: 1,\r\n      name: 'Player 1',\r\n      spirit: { \r\n        id: 'RG', \r\n        name: 'Rampend Green'\r\n      }\r\n    }, {\r\n      id: 2,\r\n      name: 'Player 2',\r\n      spirit: {\r\n        id: 'L',\r\n        name: 'Lightning'\r\n      }\r\n    }, {\r\n      id: 3,\r\n      name: 'Player 3',\r\n      spirit: {\r\n        id: 'TS',\r\n        name: 'Thunderspeaker'\r\n      }\r\n    }\r\n  ],\r\n  difficulty: 4,\r\n  scoring: 52\r\n},{\r\n  id: 2,\r\n  date: '21.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'R',\r\n      name: 'River'\r\n    }\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'L',\r\n      name: 'Lightning'\r\n    }\r\n  }],\r\n  difficulty: 6,\r\n  scoring: 37\r\n},\r\n{\r\n  id: 3,\r\n  date: '29.04.2019',\r\n  players: [{\r\n    id: 1,\r\n    name: 'Player 1',\r\n    spirit: {\r\n      id: 'RG',\r\n      name: 'Rampend Green'\r\n    }\r\n  }, {\r\n    id: 2,\r\n    name: 'Player 2',\r\n    spirit: {\r\n      id: 'S',\r\n      name: 'Serpent'\r\n    }\r\n  }, {\r\n    id: 3,\r\n    name: 'Player 3',\r\n    spirit: {\r\n      id: 'TS',\r\n      name: 'Thunderspeaker'\r\n    }\r\n  }\r\n  ],\r\n  difficulty: 3,\r\n  scoring: 43\r\n}]\r\n\r\nconst Overview = () => {\r\n  const renderSpirits = (players: any) => {\r\n    return players.map((player: any) => (\r\n      <li key={player.id}>\r\n        <div>\r\n          <span title={player.spirit.name}>{player.spirit.id}</span>\r\n        </div>\r\n      </li>\r\n    ));\r\n  };\r\n\r\n  const renderTiles = () => {\r\n    return Games.map((game: any) => (\r\n      <Tile to=\"#\" key={game.id}>\r\n        <TileContent>\r\n          <TileTitle>{game.date}</TileTitle>\r\n          <TileInfoList>\r\n            <li>\r\n              <i className=\"ra ra-player\" title=\"Players\"></i>\r\n              <span>{game.players.length}</span>\r\n            </li>\r\n            <li>\r\n              <i className=\"ra ra-cubes\" title=\"Difficulty\"></i>\r\n              <span>{game.difficulty}</span>\r\n            </li>\r\n          </TileInfoList>\r\n          <TileSpiritList>\r\n            {renderSpirits(game.players)}\r\n          </TileSpiritList>\r\n        </TileContent>\r\n        <Scoring>\r\n          <ScoringValue>{game.scoring}</ScoringValue>\r\n        </Scoring>\r\n      </Tile>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header>\r\n        <h1>Overview</h1>\r\n        <div>\r\n          Menu\r\n        </div>\r\n      </Header>\r\n      <Content>\r\n        {renderTiles()}\r\n      </Content>\r\n      <ButtonFloating>\r\n        <i className=\"material-icons\">add</i>\r\n      </ButtonFloating>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Overview;","import React from 'react';\r\nimport {\r\n  BrowserRouter,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport Overview from '../../pages/Overview';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/overview' />} />\r\n        <Route exact path='/overview' component={Overview} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GlobalStyle from './globalStyles';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.Fragment>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}